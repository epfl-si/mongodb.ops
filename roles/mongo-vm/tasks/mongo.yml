# Install MongoDB 7.0 Community Edition on Red Hat Enterprise Linux
# https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-red-hat/#additional-information

- tags: always
  include_vars: mongo-vars.yml

# https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-red-hat/#configure-the-package-management-system-yum
- name: Configure the package management system (yum)
  ansible.builtin.template:
    src: mongodb-org-repo.j2
    dest: "/etc/yum.repos.d/mongodb-org-{{ mongodb_major_version }}.0.repo"

# Special configuration file for the `ansible.builtin.dnf` command below:
- name: "/etc/dnf/dnf-ansible.conf"
  shell:
    creates: /etc/dnf/dnf-ansible.conf
    cmd: |
      grep -v "^exclude=" /etc/dnf/dnf.conf > /etc/dnf/dnf-ansible.conf

# https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-red-hat/#install-the-mongodb-packages
- name: "Install the MongoDB {{ mongodb_version }} packages"
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: present
    conf_file: "/etc/dnf/dnf-ansible.conf"
  with_items:
    - "mongodb-org-{{ mongodb_version }}"
    - "mongodb-org-database-{{ mongodb_version }}"
    - "mongodb-org-server-{{ mongodb_version }}"
    - "mongodb-mongosh-{{ mongosh_version }}"
    - "mongodb-org-mongos-{{ mongodb_version }}"
    - "mongodb-org-tools-{{ mongodb_version }}"

# yum automatically upgrades packages when newer versions become available. If
# you want to prevent MongoDB upgrades, pin the package by adding the following
# exclude directive to your /etc/yum.conf file:
- name: Don't automatically upgrade MongoDB packages
  ansible.builtin.lineinfile:
    path: /etc/yum.conf
    line: |
      exclude=mongodb-org,mongodb-org-database,mongodb-org-server,mongodb-mongosh,mongodb-org-mongos,mongodb-org-tools

# Replace 127.0.0.1 => 0.0.0.0 into /etc/mongod.conf
- name: Replace a localhost entry searching for a literal string to avoid escaping
  ansible.builtin.lineinfile:
    path: /etc/mongod.conf
    search_string: '  bindIp: 127.0.0.1  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.'
    line: '  bindIp: 0.0.0.0  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.'

- name: Start and wait for MongoDB
  block:
  - name: Start service mongod
    ansible.builtin.service:
      name: mongod
      state: started
      enabled: yes
  - name: Wait for service mongod is running
    ansible.builtin.wait_for:
      host: "{{ inventory_hostname }}"
      port: "{{ mongodb_port }}"
      delay: 5
      timeout: 60

- name: Check if root user is already there
  community.mongodb.mongodb_shell:
    login_user: "{{ mongodb_db_inventory.admin.user }}"
    login_password: "{{ mongodb_db_inventory.admin.password }}"
    eval: "db.getRoles({showBuiltinRoles: true})"
  register: _mongo_root_user
  changed_when: False
  ignore_errors: yes

- name: Create root for MongoDB database
  community.mongodb.mongodb_user:
    database: "admin"
    name: "{{ mongodb_db_inventory.admin.user }}"
    password: "{{ mongodb_db_inventory.admin.password }}"
    state: present
    roles: root
  when: _mongo_root_user.failed is true 

- name: Force MongoDB authentification
  block:
  - name: Force MongoDB authentification 1/2
    ansible.builtin.lineinfile:
      path: /etc/mongod.conf
      search_string: '#security:'
      line: 'security:'
    register: _mongod_conf_line_1
  - name: Force MongoDB authentification 2/2
    ansible.builtin.lineinfile:
      path: /etc/mongod.conf
      insertafter: 'security:'
      line: '  authorization: "enabled"'
    register: _mongod_conf_line_2

- name: Change MongoDB Storage path
  block:
  - name: Create MongoDB storage directory
    ansible.builtin.file:
      path: "{{ mongodb_storage_path }}"
      state: directory
      owner: mongod
      group: mongod
      mode: 0755
  - name: Change MongoDB Storage configuration
    ansible.builtin.replace:
      path: /etc/mongod.conf
      regexp: "^# Where and how to store data.\nstorage:\n  dbPath: {{ mongodb_storage_path }}\n(.*)\n$"
      replace: |
        # Where and how to store data.
        storage:
          dbPath: {{ mongodb_storage_path }}
        # directoryPerDB: true
    register: _mongod_conf_storage

- name: Restart and wait for MongoDB
  block:
  - name: Restart service mongod
    ansible.builtin.service:
      name: mongod
      state: restarted
      enabled: yes
  - name: Wait for service mongod is running
    ansible.builtin.wait_for:
      host: "{{ inventory_hostname }}"
      port: "{{ mongodb_port }}"
      delay: 5
      timeout: 60
  when: (_mongod_conf_line_1 is changed or _mongod_conf_line_2 is changed or _mongod_conf_storage is changed)

- name: Create users for MongoDB databases
  community.mongodb.mongodb_user:
    login_user: "{{ mongodb_db_inventory.admin.user }}"
    login_password: "{{ mongodb_db_inventory.admin.password }}"
    login_port: "{{ mongodb_port }}"
    database: "{{ item.key }}"
    name: "{{ item.value.user }}"
    password: "{{ item.value.password }}"
    state: present
    roles: dbOwner
  when: item.key != 'admin'
  loop: "{{ mongodb_db_inventory | dict2items }}"
