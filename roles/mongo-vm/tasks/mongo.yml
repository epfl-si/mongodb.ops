# Install MongoDB 7.0 Community Edition on Red Hat Enterprise Linux
# https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-red-hat/#additional-information

- tags: always
  include_vars: mongo-vars.yml

# https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-red-hat/#configure-the-package-management-system-yum
- name: Configure the package management system (yum)
  ansible.builtin.template:
    src: mongodb-org-repo.j2
    dest: "/etc/yum.repos.d/mongodb-org-{{ mongodb_major_version }}.0.repo"

# Special configuration file for the `ansible.builtin.dnf` command below:
- name: "/etc/dnf/dnf-ansible.conf"
  shell:
    creates: /etc/dnf/dnf-ansible.conf
    cmd: |
      grep -v "^exclude=" /etc/dnf/dnf.conf > /etc/dnf/dnf-ansible.conf

# https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-red-hat/#install-the-mongodb-packages
- name: "Install the MongoDB {{ mongodb_version }} packages"
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: present
    conf_file: "/etc/dnf/dnf-ansible.conf"
  with_items:
    - "mongodb-org-{{ mongodb_version }}"
    - "mongodb-org-database-{{ mongodb_version }}"
    - "mongodb-org-server-{{ mongodb_version }}"
    - "mongodb-mongosh-{{ mongosh_version }}"
    - "mongodb-org-mongos-{{ mongodb_version }}"
    - "mongodb-org-tools-{{ mongodb_version }}"

# yum automatically upgrades packages when newer versions become available. If
# you want to prevent MongoDB upgrades, pin the package by adding the following
# exclude directive to your /etc/yum.conf file:
- name: Don't automatically upgrade MongoDB packages
  ansible.builtin.lineinfile:
    path: /etc/yum.conf
    line: |
      exclude=mongodb-org,mongodb-org-database,mongodb-org-server,mongodb-mongosh,mongodb-org-mongos,mongodb-org-tools


# Replace 127.0.0.1 => 0.0.0.0 into /etc/mongod.conf

- name: Replace a localhost entry searching for a literal string to avoid escaping
  ansible.builtin.lineinfile:
    path: /etc/mongod.conf
    search_string: '  bindIp: 127.0.0.1  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.'
    line: '  bindIp: 0.0.0.0  # Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.'

#
# If needed, here would be a good place to configure SELinux with MongoDB:
# https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-red-hat/#std-label-install-rhel-configure-selinux
#

- name: Start service mongod
  ansible.builtin.service:
    name: mongod
    state: started
    enabled: yes

- name: Wait for service mongod is running
  ansible.builtin.wait_for:
    host: "{{ inventory_hostname }}"
    port: 27017
    delay: 5
    timeout: 60
  become: yes

- name: Create root for mongodb database
  community.mongodb.mongodb_user:
    database: "admin"
    name: "{{ secrets.mongodb.admin.user }}"
    password: "{{ secrets.mongodb.admin.password }}"
    state: present
    roles: root

- name: Force mongodb authentification 1/2
  ansible.builtin.lineinfile:
    path: /etc/mongod.conf
    search_string: '#security:'
    line: 'security:'  

- name: Force mongodb authentification 2/2
  ansible.builtin.lineinfile:
    path: /etc/mongod.conf
    insertafter: 'security:'
    line: '  authorization: "enabled"'

- name: Restart service mongod
  ansible.builtin.service:
    name: mongod
    state: restarted
    enabled: yes

- name: Wait for service mongod is running
  ansible.builtin.wait_for:
    host: "{{ inventory_hostname }}"
    port: 27017
    delay: 5
    timeout: 60
  become: yes

- name: Create users for mongodb databases
  community.mongodb.mongodb_user:
    login_user: "{{ secrets.mongodb.admin.user }}"
    login_password: "{{ secrets.mongodb.admin.password }}"
    login_port: "27017"
    database: "{{ item.key }}"
    name: "{{ item.value.user }}"
    password: "{{ item.value.password }}"
    state: present
    roles: dbOwner
  loop: "{{ databases | dict2items }}"
