#!/bin/bash

set -e

help () {
    fatal <<HELP_MSG

Usage:

  $0 --list-tags
  $0 [ -t sometag ] [ ... ]

    Install the suitcase, then run Ansible with the specified arguments. This is the
    default mode of operation.

  $0 kubeconfig [ --prod ]

    Retrieve the kube-admin credentials from the working cluster.

  $0 kubectl [ --prod ] [...]

    Run the kubectl command with the specified arguments, and provide it with
    kube-admin credentials from the working cluster.


HELP_MSG
}

cd "$(cd "$(dirname "$0")"; pwd)"

ensure_suitcase () {
    if ! test -f ansible-deps-cache/.versions 2>/dev/null; then
        curl https://raw.githubusercontent.com/epfl-si/ansible.suitcase/master/install.sh | \
            SUITCASE_DIR=$PWD/ansible-deps-cache \
            SUITCASE_ANSIBLE_VERSION=10.0.1 \
            SUITCASE_ANSIBLE_REQUIREMENTS=./requirements.yml \
            bash -x
    fi
    . ansible-deps-cache/lib.sh
    ensure_ansible_runtime
}

ensure_k0s_role () {
  if [ ! -d ansible-deps-cache/roles/epfl-si.k0s ]; then
     mkdir -p ansible-deps-cache/roles || true
     git clone git@github.com:epfl-si/ansible-k0s.git ansible-deps-cache/roles/epfl-si.k0s
  fi
}

ensure_kubectl () {
  if which kubectl >/dev/null; then return 0; fi
  fatal <<'PLEASE_INSTALL_KUBECTL'

For this invocation to run, The `kubectl` command must be available
in the $PATH. Please install it using the documentation:

   https://kubernetes.io/docs/tasks/tools/

PLEASE_INSTALL_KUBECTL
}

download_k0s_credentials () {
  if ! [ -d k0s_credentials ]; then mkdir k0s_credentials; fi
  grep xaas.epfl.ch inventory/inventory-${kubectl_target_cluster}.yml | \
      sed -E -n 's/^[[:space:]]*([a-zA-Z0-9.-]+\.[a-zA-Z]+):.*$/\1/p' | \
      while read hostname; do
        creds="$(ssh root@$(grep xaas.epfl.ch inventory/inventory-${kubectl_target_cluster}.yml | head -1 | sed -E -n 's/^[[:space:]]*([a-zA-Z0-9.-]+\.[a-zA-Z]+):.*$/\1/p' ) k0s kubeconfig admin || true)"
        if [ -n "$creds" ]; then
           echo "$creds" > k0s_credentials/kubeconfig-$kubectl_target_cluster
           echo k0s_credentials/kubeconfig-$kubectl_target_cluster
           break
        fi
      done
}

ensure_suitcase
ensure_k0s_role

declare -a remaining_args
exec_mode=
inventory_mode="test"
kubectl_target_cluster="test"
while [ "$#" -gt 0 ]; do
  case "$1" in
    --help)
      help ;;
    --prod)
      inventory_mode="test-and-prod"
      kubectl_target_cluster="prod"
      shift ;;
    kubectl)
      exec_mode=kubectl
      shift
      ;;
    kubeconfig)
      exec_mode=kubeconfig
      shift
      ;;
    *)
      remaining_args+=("$1")
      shift ;;
  esac
done

inventories () {
  case "$inventory_mode" in
    test)          echo "-i inventory/inventory-test.yml" ;;
    test-and-prod) echo "-i inventory/inventory-test.yml -i inventory/inventory-prod.yml" ;;
  esac
}

case "$exec_mode" in
  kubectl)
    ensure_kubectl
    export KUBECONFIG="$(download_k0s_credentials)"
    exec kubectl "${remaining_args[@]}"
    ;;
  kubeconfig)
    kubeconfig="$(download_k0s_credentials)"
    warn <<PLEASE_SET_KUBECONFIG

Success - Kubernetes credentials are now available in $kubeconfig

Please set the KUBECONFIG variable accordingly, e.g.

   export KUBECONFIG=$kubeconfig

before running your Kubernetes client.

ðŸ’¡ Lens / OpenLens want you to copy and paste the contents of
that file into a dialog that pops up with File â†’ Add Cluster...
instead of setting the environment variable.

PLEASE_SET_KUBECONFIG
    exit 0;;
  *)
    ansible-playbook $(inventories) playbook.yml "${remaining_args[@]}"
    ;;
esac
